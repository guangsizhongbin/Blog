<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - xiaonan&#39;s Blog</title>
        <link>http://fengqigang.cn/posts/</link>
        <description>All Posts | xiaonan&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>gaungsizhongbin@gmail.com (fengxiaonan)</managingEditor>
            <webMaster>gaungsizhongbin@gmail.com (fengxiaonan)</webMaster><lastBuildDate>Mon, 13 Sep 2021 22:39:42 &#43;0800</lastBuildDate><atom:link href="http://fengqigang.cn/posts/" rel="self" type="application/rss+xml" /><item>
    <title>02 Mybatis执行器</title>
    <link>http://fengqigang.cn/posts/02-mybatis%E6%89%A7%E8%A1%8C%E5%99%A8/</link>
    <pubDate>Mon, 13 Sep 2021 22:39:42 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/02-mybatis%E6%89%A7%E8%A1%8C%E5%99%A8/</guid>
    <description><![CDATA[mybatis的四大模块   动态代理 MapperProxy
  SQL 会话 SqlSession
  执行器 Executor
  JDBC StatementHandler
  Mybatis的执行过程 门面模式:
提供一个统一的门面接口API, 使得系统更容易使用]]></description>
</item><item>
    <title>01 Mybaits源码环境搭建</title>
    <link>http://fengqigang.cn/posts/01-mybaits%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
    <pubDate>Sun, 12 Sep 2021 23:11:24 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/01-mybaits%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
    <description><![CDATA[克隆mybatis仓库 mybatis: https://github.com/mybatis/mybatis-3
parent: https://github.com/mybatis/parent
编译   先编译parent
  后编译mybatis
  创建一个maven项目  删掉其src, 创建一个springboot module  测试springboot项目是否可以启动  添加之前的mybatis项目 添加mybatis为新项目的依赖 测试mybatis是否搭建成功  bean  1 2 3 4 5 6 7 8  import lombok.Data; @Data public class Student { private int id; private String name; private int age; }   StudentMapper  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import cn.]]></description>
</item><item>
    <title>03 Springboot启动正常,访问接口出现404错误</title>
    <link>http://fengqigang.cn/posts/03-springboot%E5%90%AF%E5%8A%A8%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E5%87%BA%E7%8E%B0404%E9%94%99%E8%AF%AF/</link>
    <pubDate>Sat, 11 Sep 2021 23:48:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/03-springboot%E5%90%AF%E5%8A%A8%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E5%87%BA%E7%8E%B0404%E9%94%99%E8%AF%AF/</guid>
    <description><![CDATA[错误事例 产生的原因  controller 控制类不在启动类所在的目录下或子目录中  解决的方案  将启动类与controller放在同一层，或将contrller的子目录下  在启动类上加上@ComponentScan(basePackages = {&quot;cn.fengqigang.*&quot;}) 注解  也可以直接写]]></description>
</item><item>
    <title>02 SpringBoot加载配置文件</title>
    <link>http://fengqigang.cn/posts/02-springboot%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
    <pubDate>Fri, 10 Sep 2021 23:49:36 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/02-springboot%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
    <description><![CDATA[springboot的自动化配置 默认情况下 springboot 会自动读取 application.properties 和 application.yaml
使用 application.yaml 中的配置  @Value()   application.yaml  1  config:hello, fengqigang  使用
 HelloControl  1 2 3 4 5 6 7 8 9 10 11  @RestController public class HelloControl { @Value(&#34;${config}&#34;) private String config; @RequestMapping(&#34;/index&#34;) public void say() { System.out.println(config); } }   配置成实体类   BeanConfig  1 2 3 4 5 6 7  @Data @Component @ConfigurationProperties(prefix = &#34;config2&#34;) public class BeanConfig { public String name; public String value; }    BeanController  1 2 3 4 5 6 7 8 9 10 11  @RestController public class BeanController { @Autowired public BeanConfig beanConfig; @RequestMapping(&#34;/say&#34;) public void say(){ System.]]></description>
</item><item>
    <title>01 @Autowired与@Resource的区别</title>
    <link>http://fengqigang.cn/posts/01-autowired%E4%B8%8Eresource%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
    <pubDate>Thu, 09 Sep 2021 22:30:23 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/01-autowired%E4%B8%8Eresource%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
    <description><![CDATA[区别   来源不同   @Resource是java自带的
@AutoWired是spring带来的
 注入的方式不同   @Autowired 只按照 byType 注入
出现多个实现bean时可以用@Primary 来修饰也可以用@Qualifier来标注需要注入的类
@Resource 默认按 byName 注入
出现多个实现bean时可以用name=xxx来指定
实战  HumanController  1 2 3 4 5 6 7 8 9 10 11 12  @RestController @RequestMapping(&#34;/an&#34;) public class HumanController { @Autowired private Human human; @RequestMapping(&#34;/run&#34;) public String runMarathon(){ return human.runMarathon(); } }    Human  1 2 3  public interface Human { String runMarathon(); }    Man  1 2 3 4 5 6 7 8  @Service public class Man implements Human { @Override public String runMarathon() { return &#34;A man run marathon&#34;; } }    Woman  1 2 3 4 5 6 7  @Service public class Woman implements Human { @Override public String runMarathon() { return &#34;An woman run marathon&#34;; } }     加入@Primary, 帮助@autowired找到对应的实现类    使用@autowired时，也可以加入@Qualifier(&ldquo;xxx&rdquo;)来指定    使用@Resource时, 指定name, name后的名字要小写    使用@Resource时，再加入@Qualifier(&ldquo;xxx&rdquo;)来指定   ]]></description>
</item><item>
    <title>04 SequenceDiaram</title>
    <link>http://fengqigang.cn/posts/04-sequencediaram/</link>
    <pubDate>Wed, 08 Sep 2021 22:56:37 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/04-sequencediaram/</guid>
    <description><![CDATA[Sequnce of events actors lifelines message alternative frame ]]></description>
</item><item>
    <title>03 ERD实体关系图</title>
    <link>http://fengqigang.cn/posts/03-erd%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BE/</link>
    <pubDate>Tue, 07 Sep 2021 23:32:23 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/03-erd%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%9B%BE/</guid>
    <description><![CDATA[ERD 的全称是什么? Entity Relationship Diagrams
ERD 的关系 ERD 图实例 Primary Key and Foreign Key A Primary Key is an attribute (or field) that uniquely identifies every record in a certain table.
Primary Key Rules   Unique
  Never changing
  Never null
  composite key composite Key Rules   Use the fewest number of attributes possible.
  Don&rsquo;t use attributes that are apt to change.]]></description>
</item><item>
    <title>02 UML用例图</title>
    <link>http://fengqigang.cn/posts/02-uml%E7%94%A8%E4%BE%8B%E5%9B%BE/</link>
    <pubDate>Mon, 06 Sep 2021 22:58:09 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/02-uml%E7%94%A8%E4%BE%8B%E5%9B%BE/</guid>
    <description><![CDATA[用例图的四个元素 Systems   Website
  Software Component
  Business Process
  Application
  Actors  Primary Actors  Initiate the use of the system
 Secondary Actors  Reactionary
Use Cases Represents an action that accomplishes some sort of task within the system.
Relationships  Association   Include  The base use case requires an included use case in order to be complete.
 Extend  You have the option to extend the behavior of the base use case.]]></description>
</item><item>
    <title>01 Uml类图</title>
    <link>http://fengqigang.cn/posts/01-uml%E7%B1%BB%E5%9B%BE/</link>
    <pubDate>Sun, 05 Sep 2021 23:26:34 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/01-uml%E7%B1%BB%E5%9B%BE/</guid>
    <description><![CDATA[UML类图例子 可见性修饰   -private
  +public
  #protected
  ~package/default
  关系  Inheritace 继承  Association 联系(sb eat sb)  Aggregation  A group of tortoises is called a creep.
Composition  Multiplicity
         0..1 zero to one(optional)   n specific number   n&hellip;* zero to many   1..* one to many   m.]]></description>
</item><item>
    <title>02 Nats所支持的协议</title>
    <link>http://fengqigang.cn/posts/02-nats%E6%89%80%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE/</link>
    <pubDate>Thu, 26 Aug 2021 23:00:07 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/02-nats%E6%89%80%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE/</guid>
    <description><![CDATA[NATS 可以支持 nats 或 tls 协议
NATS 可以是单个服务，也可以是集群
nats 协议 nats://demo.nats.io, 4222是NATS的默认协议
tls 协议 tls://demo.nats.io:4443]]></description>
</item></channel>
</rss>
