<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - xiaonan&#39;s Blog</title>
        <link>http://fengqigang.cn/posts/</link>
        <description>All Posts | xiaonan&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>gaungsizhongbin@gmail.com (xiaonan)</managingEditor>
            <webMaster>gaungsizhongbin@gmail.com (xiaonan)</webMaster><lastBuildDate>Wed, 09 Jun 2021 16:04:58 &#43;0800</lastBuildDate><atom:link href="http://fengqigang.cn/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Picgo</title>
    <link>http://fengqigang.cn/posts/picgo/</link>
    <pubDate>Wed, 09 Jun 2021 16:04:58 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/picgo/</guid>
    <description><![CDATA[什么是PicGo?  github
如何安装PicGo? win   exe 安装
  choco 安装
  1  choco install picgo    scoop 安装  1  coop bucket add helbing https://github.com/helbing/scoop-bucket &amp; scoop install picgo   Linux  arch  1  yay -S picgo-appimage    AppImage  1 2  chomod a+x PicGo-2.3.0-beta.6.AppImage ./PicGo-2.3.0-beta.6.AppImage   MacOS  brew  1  brew install picgo --cask   PicGo + 阿里云oss?]]></description>
</item><item>
    <title>Day39</title>
    <link>http://fengqigang.cn/posts/day39/</link>
    <pubDate>Mon, 17 May 2021 23:31:44 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day39/</guid>
    <description><![CDATA[引入css有哪几种方式?  在 div 后写 style  写在 head 标签内， 用 style 包裹  导入外部文件，用link标签(可使用相对路径，也可使用绝对路径)  有哪些方式可以挑选选择器?  标签选择器  类选择器(在一个 html 页面上， 每一个标签的 class 可以有多个)  ID选择器(在一个 html 页面上，每一个标签的 id 是唯一的)   层级复合选择器   属性选择器  选择器的优先级是什么样的? 如何强制升到最高的优先级? 行内 &gt; ID &gt; 伪类|类 属性选择 &gt; 标签 &gt; 统配符
文件中 css 与导入的 css (优先级一样), 需要 满足就近原则
强制升到最高的优先级
当前位置所设置的属性为最高级
什么是标准流(标准文档流, 文档流)?   在一个 HTML 页面中，页面会根据页面的(行和块)特性，会从上到下，从左到右按顺序排列
  每一个 HTML 标签， 要在页面上占据空间]]></description>
</item><item>
    <title>Day38</title>
    <link>http://fengqigang.cn/posts/day38/</link>
    <pubDate>Thu, 13 May 2021 23:34:52 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day38/</guid>
    <description><![CDATA[为什么是出现 html? 当时是为了传论文
html 是谁的? html + css + js 都是W3C的
W3C (The World Wide web Consortium)
它是一个组织， 只提供一系列的草案，因此没有相关的文档
为什么在不同的浏览器中执行相同的前端代码， 有些浏览器会走形, 并且错误的代码也可以输出? 因为为了在浏览器大战中获得胜利，各家的浏览器并没有完全遵循W3C的标准
同时各家的浏览器为了获得更多的市场，会包容错误代码
前端, 网页, Html, Css, JavaScript, 它们之间是什么样的关系? 前端: 写页面
网页: 人
Html: 骨架
Css: 皮肤和血肉
Js(JavaScript): 思想逻辑
什么是 Html ? 是一种语言
文本语言: 超文本
是一个以 .html 为后缀的文本
&lsquo;超文本&rsquo; 包括文本字体, 图片, 链接， 甚至音乐，程序等元素代码的文本
是一个文本， 也是一个网页，该文本用浏览器打开， 文本里代码会进行解释执行
html 的标准结构是什么样的? html 重要的body标签   块级标签
  行级标签
  行内块标签]]></description>
</item><item>
    <title>Day37</title>
    <link>http://fengqigang.cn/posts/day37/</link>
    <pubDate>Wed, 12 May 2021 23:29:10 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day37/</guid>
    <description><![CDATA[Shiro 权限验证框架
什么是符号表(Map) 就是 Key-value数据
互联网三要素: url
怎么找到某个资源，资源位置在哪里?
http
描述资源在网络上的传输方式
html
描述论文
怎么在互联网上唯一表示一台计算机 ip + 地址
url 分类三大部分 什么哈希表? Hash函数具有的特点 Hash算法不是加密算法 加密意味着解密
主流的 hash 算法: sha1（谷歌的两个程序员）, md5(王小云), 已经被证明不具有强抗碰撞性(先简单认为不安全)
碰撞性:
主流的 hash 函数 加盐： 盐值
账号: Admin
密码: 123
理论上的 hash 冲突如何解决? 线性探测法
平方探测法
再散列法]]></description>
</item><item>
    <title>Day36</title>
    <link>http://fengqigang.cn/posts/day36/</link>
    <pubDate>Tue, 11 May 2021 23:26:09 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day36/</guid>
    <description><![CDATA[set 特点  Set 接口是 Collection 的子接口 描述的是集合这种数据结构 它的一些自实现是有序的(LinkedHashSet, TreeSet) 有些子实现是无序的(HashSet) 有些子实现允许存储null(LinkedHashSet, HashSet), 有些子实现不允许存储 null(TreeSet) 都是不允许重复元素  set Api  初始化  collection 是 add 方法, map 是 poll 方法
 addAll   clear   containsAll      iterator()  map 不能使用增强for循环, 可以用interset,
set 可以使用增强for循环
HashSet特点  HashSet 是 Set 接口一个具体子实现 HashSet 的底层持有一个 HashMap 对象, HashMap 的底层是一个数组 + 链表 + 红黑树结构, 所以存储到 HashSet 中的元素， 实际上都存储到 HashSet 所持有 HashMap 中作为 Key 存在 由于它的底层持有的是 HashMap 对象，所以无序 不允许存储重复元素： 存储的元素 hash 值一样，并且两个元素直接相等或者相 equals.]]></description>
</item><item>
    <title>Day35</title>
    <link>http://fengqigang.cn/posts/day35/</link>
    <pubDate>Tue, 11 May 2021 23:25:23 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day35/</guid>
    <description><![CDATA[day35_linkedHashMap
LinkedHashMap的特点   LinkedHashMap 是 HashMap 一个子类
  LinkedHashMap 基本上完全复用了 HashMap 的底层结构， 参数，方法
  LinkedHashMap的特点基本遵从于 HashMap
  LinkedHashMap 底层在 HashMap 的基础上(数组 + 链表 + 红黑树) 额外维护了一个双向链表: 这个双向链表用来记录存储
  LinkedHashMap 如何额外维护一个双向链表? 构造方法?  默认的构造方法  accessOrder(如果我们给accessOrder 设置为真，那么我们如果访问了这个LinkedHashMap中的某一个Key-value数据，那么这份Key-value数据就会在双向链表中的位置移到最后， 它在红黑树上的位置不变)   API TreeMap 有什么特点?  TreeMap 是 Map 一个子实现 描述数据结构是树/二叉搜索树/红黑树 底层是链表 TreeMap 大小有序(中序遍历是有序的) 不允许重复的 key 不允许null键 线程不安全 Treemap 的重复的定义: 大小比较结果是0, 自然顺序/比较器 如果我们希望在TreeMap中存储数据 ，key-value, 我们可以有两个选择：   让key本身可以比较(继承Comparabe接口实现 compareTo 方法)（但会让代码看一起来不清爽） 不想让 key 本身实现 Comparable 接口实现, 手动用比较器实现  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  public class DemoTreeMap { public static void main(String[] args) { TreeMap&lt;User3, Integer&gt; map = new TreeMap&lt;&gt;(); map.]]></description>
</item><item>
    <title>Day34</title>
    <link>http://fengqigang.cn/posts/day34/</link>
    <pubDate>Mon, 10 May 2021 23:36:10 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day34/</guid>
    <description><![CDATA[套壳 Java 集合体系是什么样的? 两个
Collection 集合体系
Map 集合体系
都是 Object 的子类
Map 特点  Map 接口是Map 集合体系的顶级接口 和 Collection 接口以及 Collection 下面子实现不同的是, Map 所存储的数据不再是单个数据的，而是 Key-value 的数据(键值对) Map 的子实现有些是有序的，有些是无序的 Map 的子实现不允许存储重复key(重复元素的定义不同) Map 有些子实现可以存储 null, 有些子实现不允许存储 null (指key值)  Map 的 Api? put
1 2 3 4 5 6 7 8 9 10 11 12 13  public class TestMap { public static void main(String[] args) { HashMap map = new HashMap&lt;String, Integer&gt;(2); // put  map.]]></description>
</item><item>
    <title>Day33</title>
    <link>http://fengqigang.cn/posts/day33/</link>
    <pubDate>Sat, 08 May 2021 23:40:30 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day33/</guid>
    <description><![CDATA[Queue接口的特点  Queue 接口是 Collection 接口的一个子接口中 Queue 代表/ 描述的是队列(什么是队列: 一个操作受到限制的线性表, 在添加的时候只能在一端添加，删除是在另一端删除 -&gt; 先进先出，后进后出) 有序 能存储重复元素 不能存储null  (poll) 方法， 如果没有元素可以删除,null返回， 如果允许null存储，poll方法就没办法分辨返回的null是没有元素可删除的标记，还是原本存储的null, 因些不让存null
API Deque 接口  Deque 接口是Queue接口的一个子接口 Deque 在Queue接口上进行了扩展: 不仅仅可以作为普通队列，还定义了双端队列，栈 有序 允许重复 不能存储 null(LinkedList) 除外  ArrayDeque 特点  ArrayDeque 是 Deque(双端队列)的一个子实现 可以作为 普通队列/ 双端队列/ 栈 底层数组(循环数组) 默认的初始容量16， 扩容机制(扩充2倍) 方便取余运算  如果不大于8， 直接创建一个为8的数组
有序 允许重复 不允许存储null 线程不安全 我们可以在构造方法里指定底层数组长度，但是给定的数组长度并不真的是我们给定的值 ，而是一个大于我们给定值 的最小2的幂值 -&gt; 底层数组的长度永远是2的幂值  取模运算
构造方法
BlockingQueue
是接口
1 2 3 4 5 6 7 8 9 10  public class DemoBlockingQueue { public static void main(String[] args) { ArrayBlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(2); queue.]]></description>
</item><item>
    <title>Day32</title>
    <link>http://fengqigang.cn/posts/day32/</link>
    <pubDate>Sat, 08 May 2021 09:20:43 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day32/</guid>
    <description><![CDATA[ArrayList的特点?   ArrayList 是 List 接口的一个具体实现(线性表)
  底层是一个数组
  数组的默认长度(10)， 数组的扩容机制(1.5倍)
  有序
  允许重复元素
  允许null
  线程不安全
  在默认的创建 ArrayList 对象的时候，如果不添加，那么构造方法并没有真正创建一个长度为10的数组，而是构建空数组
但是面试的时候，首先你要说的就是默认长度为10
ArrayList 实战 1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class TestLink { public static void main(String[] args) { ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&#34;zs&#34;); list.add(&#34;ls&#34;); list.add(&#34;wu&#34;); list.add(&#34;zs&#34;); list.add(null); System.out.println(list); } }   构造方法  指定集合  API add]]></description>
</item><item>
    <title>Day31</title>
    <link>http://fengqigang.cn/posts/day31/</link>
    <pubDate>Fri, 07 May 2021 23:31:41 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day31/</guid>
    <description><![CDATA[List的特点   List 的是 Collection 的子接口
  List 是 Collection 的一个 线性表 子接口 -&gt; (有序, 有下标操作)
  有序
  允许重复元素存在
  允许 null
  API? add
1 2 3 4 5 6 7 8 9 10 11  public class TestLink { public static void main(String[] args) { ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&#34;zs&#34;); list.add(&#34;ls&#34;); list.add(&#34;wu&#34;); list.add(&#34;zl&#34;); System.out.println(list); } }   addAll
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  public class TestLink { public static void main(String[] args) { ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.]]></description>
</item></channel>
</rss>
