<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>java - Tag - xiaonan&#39;s Blog</title>
        <link>http://fengqigang.cn/tags/java/</link>
        <description>java - Tag - xiaonan&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>gaungsizhongbin@gmail.com (xiaonan)</managingEditor>
            <webMaster>gaungsizhongbin@gmail.com (xiaonan)</webMaster><lastBuildDate>Thu, 29 Apr 2021 23:33:10 &#43;0800</lastBuildDate><atom:link href="http://fengqigang.cn/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>Day26</title>
    <link>http://fengqigang.cn/posts/day26/</link>
    <pubDate>Thu, 29 Apr 2021 23:33:10 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day26/</guid>
    <description><![CDATA[如何定义一个双链表? 定义结点
一般有:
pre , value , next
结点
1 2 3 4 5 6 7 8 9 10 11  class Node { String value; Node next; Node pre; public Node(Node pre, String value, Node next) { this.value = value; this.next = next; this.pre = pre; } }   链表
1 2 3 4 5 6 7 8 9 10 11  class Node { String value; Node next; Node pre; public Node(Node pre, String value, Node next) { this.]]></description>
</item><item>
    <title>Day25</title>
    <link>http://fengqigang.cn/posts/day25/</link>
    <pubDate>Wed, 28 Apr 2021 23:09:33 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day25/</guid>
    <description><![CDATA[如何利用双指针法输出输出中的中间元素(快指针与慢指针)? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  public class Ex3 { public static void main(String[] args) { Node zs = new Node(&#34;zs&#34;, null); Node ls = new Node(&#34;ls&#34;, null); Node wu = new Node(&#34;wu&#34;, null); Node sq = new Node(&#34;sq&#34;, null); Node qg = new Node(&#34;qg&#34;, null); zs.]]></description>
</item><item>
    <title>Day24</title>
    <link>http://fengqigang.cn/posts/day24/</link>
    <pubDate>Tue, 27 Apr 2021 21:44:31 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day24/</guid>
    <description><![CDATA[数据结构和 Java 有什么关系? 数据结构本身和JAVA没有任何关系
只不过AVA中有多种集合、数组、等集合性质的多对象存储结构,
有时候我们希望更便捷, 更具有逻辑性的操作这些集合或者数组数据
所以我们根据数据结构的组织方式，构建了一些特殊的JAVA集合类
用于描述了一些JAVA对象的底层数据的组成关系
JAVA的集合类底层组织数据的方式，是参照某些数据结构（逻辑、思想）来进行的
数据结构的种类和JAVA中的集合类别有哪些？ 数据结构：抽象概念/逻辑概念
集合：一堆数据
线性表：有序的序列（操作受限的线性表：栈：先进后出队列：先进先出）
Y= ax + b
树：一对多的数据关系，国家，族谱
图：多对多的关系：理论层级
为什么需要集合类？ 很多情况下，我们需要对一组对象进行操作。而且很可能事先并不知道到底有多少个对象。为了解决这个问题，Java就提供了集合类供我们使用。
（存储更多类型问题，扩容问题, 内存空间浪费问题,数据查找问题，数据删除问题等等
数组的主要特点是什么? 数组是连续存储 -&gt; 随机访问的
为什么数组的索引一般都是从0开始的呢? 第一个层面:
历史遗留问题, 在计算资源缺乏的过去，o标号的写法可以节省编译时间
第二个层面:
方便计算
计算公式 = (下标 - 1) * 单个元素空间 + 基础位置
为什么数组的效率比链表高? 链表:
链表是非连续存储的
数组:
是连续存储的
Java 中的一维， 多维数组的内存空间是连续的吗？ 在 java 中只有一维数组的内存空间是连续的，多维数组的内存空间不一定连续.
数组的基本操作(添加, 删除)的(最好情况，最坏情况，平均情况)时间复杂度? 添加(保证元素的顺序)
最好情况: O(1)
最坏情况: 移动n个元素
平均情况: 移动 n/2 个元素
删除(保证元素的顺序)
最好情况： O(1)
最坏情况: 移动 n-1 个元素, O(n)]]></description>
</item><item>
    <title>Day23</title>
    <link>http://fengqigang.cn/posts/day23/</link>
    <pubDate>Mon, 26 Apr 2021 23:39:19 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day23/</guid>
    <description><![CDATA[类加载的细分? 类加载通过 加载, 连接， 初始化 三步来实现
类加载中的加载是如何执行的？ 通过类加载器获得二进制字节流
在内存中生成一个代表这个类的 java.lang Class对象，作为方法区这个类的各种数据的访问入口
类加载中的连接是如何执行的? 验证：确保被加载类的正确性正确性的校验
cafe babe:magic number起校验作用的
准备：负责为类的静态成员分配内存并设置默认初始化值
解析：将类中的符号引用 (跟编译原理相关) 潜替换为直接引用(内存地址)
类加载中的初始化是如何执行的？ 给静态成员变量赋初值，执行静态代码块内容
类加载时机有哪些? 创建类的实例 (首次创建该类)
对象访问类的静态变量（首次)
调用类的静态方法（首次)
使用反射方式来强制创建某个类或接口对应的 java.lang.Class 对象
加载某个类的子类，会先触发父类的加载
直接使用 java. exe 命令来运行某个主类，也就是执行了某个类的main方法
类加载中有哪些加载器? Bootstrap ClassLoader
根类加载器负责Java运行时核心类的加载，JDK中JRE的目录下 rt jar
Extension ClassLoader
扩展类加载器负责JRE的扩展目录中jar包的加载，在JDK中JRE的目录下ext日录
Sysetm ClassLoader
系统类加载器/应用加载器负责加载自己定义的Java类
java 在计算机中有哪几种阶段?  源文件阶段 Class 类对象阶段(通过类加载器 ClassLoader 加载) 运行时阶段  什么是反射? 获取类运行时信息的一种技术，这种技术叫做反射技术
获取字节码文件有哪些方式?   Class.forName(&ldquo;全限定类名&rdquo;)
  类名.class
  对象.getClass（）
  如何用 Class.]]></description>
</item><item>
    <title>Day22</title>
    <link>http://fengqigang.cn/posts/day22/</link>
    <pubDate>Fri, 23 Apr 2021 23:14:11 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day22/</guid>
    <description><![CDATA[什么是计算机网络   物理互联
  软件支持
  目的: 资源共享 + 信息传递
  什么是网络编程? 处于 互联网络 上不同计算机 程序间 的数据交换
OSI参考模型有几层? 分别是什么? 7 层
物理层
数据链路层
网络层
传输层
会话层
表示层
应用层
物联网淑惠试用
物理层主要关注什么? 关注一条通信信道上传输原始比特(01)
其功能是确保当一方发送了比特1, 另一方收到的是比特1, 而不是0
物理层的所涉及到的典型问题是什么?   用什么样的电信号表示0和1
  一个 bit 持续多少纳秒
  传输是否可以在两个方向同时进行
  初始连接如何建立，传输结束后之后如何撤销连接
  规定一个特殊的电信号将普通的数据信号分开来
数据链路层主要关注什么? 将一个原始的传输设施转变成一条 没有漏检传输错误 的传输线路
检查数据是否发生差错
数据链路层的主要功能是什么?  成帧   差错控制(帧校验，确认 + 超时重传)
  流量控制]]></description>
</item><item>
    <title>Day21</title>
    <link>http://fengqigang.cn/posts/day21/</link>
    <pubDate>Fri, 23 Apr 2021 09:17:16 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day21/</guid>
    <description><![CDATA[同步方法中的锁对象是什么? 同步代码块中
任意java对象
任意方法中
this
静态方法中
字节码文件对象（.clsss） 补充代码
为什么在同步代码块中可以放一个任意的对象?  因为 java 当中所有对象， 内部都存在一个 标志位，表示加锁和解锁的状态 其实锁对象，就是充当锁的角色  所谓的加锁解锁，其实就是 设置锁对象的标志位，来表示加锁解锁的状态
当某个线程执行到同步代码块时，遇到加锁或无锁时会怎么处理?  当锁对象处于未加锁状态， jvm 就会设置锁对象的标志位(加锁)， 并在锁对象中记录，是哪个线程加的锁. 加锁成功， 执行同步代码块中的代码。 如果锁对象 已经被加锁, 且加锁线程不是当前线程，系统会让当前线程处于阻塞状态(等着)， 直到加锁线程，执行完了对共享变量的组操作，并释放锁。  加锁线程何时释放锁? 当加锁线程，执行完了同步代码块中的代码(对共享变量的一组操作)，在退出同步代码块之前,
jvm 自动清理锁对象的标志位，将锁对象变成未上锁状态(释放锁)
如何使用 Lock 锁住对象?  定义一把锁  Lock lock = new ReentrantLock();
美[ˌriˈɛntrənt]
public ReentrantLock()
Creates an instance of ReentrantLock. THis is equivalent to using ReentrantLock(false).
获取锁  lock.lock();
void lock()
Acquires the lock.
释放锁  lock.]]></description>
</item><item>
    <title>Day20</title>
    <link>http://fengqigang.cn/posts/day20/</link>
    <pubDate>Wed, 21 Apr 2021 17:00:51 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day20/</guid>
    <description><![CDATA[线程有哪5种状态? 新建:
刚创建的线程，没有执行 start() 方法， 没有资格去挣抢CPU资源
就绪
刚执行了 start 方法， 但是还没有获得CPU的执行权
执行
抢到了 CPU的执行权
阻塞
没有 CPU 的执行权，还缺少必要的条件（sleep 结束）
死亡
run 方法执行完之后
线程5个状态之间是如何转换? 用Runnable实现多线程?   实现 Runnable 接口
  重写 run 方法
  创建 Runnable 子类对象
  创建 Thread 对象， 并且把 Runnable 子类对象作为参数传递
  start 方法
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  public class RunnableDemo { public static void main(String[] args) { MyRunnable myRunnable = new MyRunnable(); Thread thread = new Thread(myRunnable); thread.]]></description>
</item><item>
    <title>Day19</title>
    <link>http://fengqigang.cn/posts/day19/</link>
    <pubDate>Tue, 20 Apr 2021 20:03:24 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day19/</guid>
    <description><![CDATA[如何实现程序睡眠3秒? TimeUnit.SECONDS.sleep(3)；
1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class TestSleep { static boolean flag = true; public static void main(String[] args) throws InterruptedException { sayHelloRecycling(); } private static void sayHelloRecycling() throws InterruptedException { while(flag){ System.out.println(&#34;你好&#34;); TimeUnit.SECONDS.sleep(3); } } }   什么是进程? 操作系统进行 资源分配与调度 的基本单位.
一个正在运行的程序，软件都可以称为进程
进程之间是互不干扰的
什么是线程? CPU 进行 资源分配与调试 的基本单位，从执行路径的角度来看在，每一条执行路径都是1个线程
进程和线程的关系？ 线程依赖于进程而存在
线程之间是共享进程资源的
一个进程可以有 最少一个线程
什么是串行, 并行，并发? 串行:]]></description>
</item><item>
    <title>Day18</title>
    <link>http://fengqigang.cn/posts/day18/</link>
    <pubDate>Mon, 19 Apr 2021 21:57:49 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day18/</guid>
    <description><![CDATA[为什么要将 FileOutputStream out = null; 放在外面，可以放在 try 语句里面? 不可以
放在 out 中， 其作用的域只能在 try 中， finally 中的 try 无法使用
reader 的继承关系是什么样的? InputStreamReader 的构造方法是什么样的? 1 2 3 4 5 6 7 8 9  public class CountNum { public static void main(String[] args) throws IOException { // 第一种构造方法  InputStreamReader in = new InputStreamReader(new FileInputStream(&#34;a.txt&#34;)); // 第二种构造方法  InputStreamReader input = new InputStreamReader(new FileInputStream(&#34;a.txt&#34;), &#34;GBK&#34;); } }   如何使用 InputStreamReader 实现单个 char 的构造方法?]]></description>
</item><item>
    <title>Day17</title>
    <link>http://fengqigang.cn/posts/day17/</link>
    <pubDate>Sun, 18 Apr 2021 23:19:15 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://fengqigang.cn/posts/day17/</guid>
    <description><![CDATA[如何实现对 FilterInput 实现装饰器模式, 对接收到的字母转换成小写? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  public class Demo { public static void main(String[] args) throws IOException { // 方法一:  BufferedInputStream br = new BufferedInputStream(new FileInputStream(&#34;a.]]></description>
</item></channel>
</rss>
